/*
    * These kernels transform an occupancy map to a Chebyshev distance map, based on Algorithms 1-3 in Deakin and Knackstedt's paper
        * https://link.springer.com/content/pdf/10.1007/s41095-019-0155-y.pdf
    * Make sure each kernel is finished running by waiting for the next frame between each dispatch (i.e. force rendering to take place between each dispatch)
        * I'm not 100 % sure this is the case. Things like this would be easier in e.g. CUDA with barriers and the like
    * Trans1 only needs to be run for y and z, Trans2 for x and z, and Trans3 for x and y
        * For each plane, we will iterate through all values in said plane. Therefore we don't need e.g. x threads in the yz plane
*/


#pragma kernel Trans1
#pragma kernel Trans2
#pragma kernel Trans3

// First InMap: Occupancy map from UniformSubdivision.compute
// After that: Stage n-1's output
Texture3D<float> InMap;
RWTexture3D<float> OutMap;

[numthreads(1,8,8)]
void Trans1 (uint3 id : SV_DispatchThreadID)
{
    uint3 position = uint3(0, id.yz);
    uint width, height, depth;
    OutMap.GetDimensions(width, height, depth);

    if (id.y >= height || id.z >= depth)
        return;

    uint prev = InMap[position];
    
    for (uint x = 1; x < width; x++)
    {
        position.x = x; // My last compute shader got angry when I used position as the iterator
        uint val = min(prev + 1, InMap[position]);
        OutMap[position] = val;
        prev = val;
    }
    
    for (int x_back = width - 2; x_back >= 0; x_back--)
    {
        position.x = x_back;
        uint val = min(prev + 1, OutMap[position]);
        OutMap[position] = val;
        prev = val;
    }
}

[numthreads(8, 1, 8)]
void Trans2(uint3 id : SV_DispatchThreadID)
{
    uint3 position = id;
    uint width, height, depth;
    OutMap.GetDimensions(width, height, depth);
    
    if (id.x >= width || id.z >= depth)
        return;
    
    for (int y = 0; y < height; y++)
    {
        position.y = y;
        float distance = InMap[position];
        
        for (uint n = 0; n < distance; n++)
        {
            if (position.y >= n)
            {
                float distance_n = InMap[position - uint3(0, n, 0)];
                distance = min(distance, max(n, distance_n));
            }
            
            if ((position.y + n) < height && n < distance)
            {
                float distance_n = InMap[position + uint3(0, n, 0)];
                distance = min(distance, max(n, distance_n));
            }
        }
        OutMap[position] = distance;
    }
}

[numthreads(8, 8, 1)]
void Trans3(uint3 id : SV_DispatchThreadID)
{
    uint3 position = id;
    uint width, height, depth;
    OutMap.GetDimensions(width, height, depth);
    
    if (id.y >= height || id.x >= width)
        return;
    
    for (int z = 0; z < depth; z++)
    {
        position.z = z;
        float distance = InMap[position];
        
        for (uint n = 0; n < distance; n++)
        {
            if (position.z >= n)
            {
                float distance_n = InMap[position - uint3(0, 0, n)];
                distance = min(distance, max(n, distance_n));
            }
            
            if ((position.z + n) < depth && n < distance)
            {
                float distance_n = InMap[position + uint3(0, 0, n)];
                distance = min(distance, max(n, distance_n));
            }
        }
        OutMap[position] = distance;
    }
}