// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float> Volume;
RWTexture3D<float4> Result;

// Deakin and Knackstedt, Algorithm 1
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float density = Volume[id];
    float3 normal = float3(0, 0, 0);
    
    int3 volumeDims;
    uint mip;
    Volume.GetDimensions(0, volumeDims.x, volumeDims.y, volumeDims.z, mip);
    
    int2 k = int2(1, -1);
    float3 gradientDir = 0.25 * (
      k.xyy * Volume[clamp(id + k.xyy, int3(0, 0, 0), volumeDims)] +
      k.yyx * Volume[clamp(id + k.yyx, int3(0, 0, 0), volumeDims)] +
      k.yxy * Volume[clamp(id + k.yxy, int3(0, 0, 0), volumeDims)] +
      k.xxx * Volume[clamp(id + k.xxx, int3(0, 0, 0), volumeDims)]
    );
    normal = normalize(gradientDir);

    Result[id] = float4(normal, density);
}
